{{- $namespace := .Release.Namespace -}}
{{- $appVersion := .Chart.AppVersion -}}
{{- $releaseName := .Release.Name }}
{{- if and .Values.installation.installDbSchema }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ $releaseName }}-install-pod
  namespace: {{ $namespace }}
  annotations:
    {{- if .Values.installation.argocd }}
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    {{- else }}
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
    "helm.sh/hook-timeout": "300s"
    {{- end }}
  labels:
    app: install-job
spec:
  imagePullSecrets:
    - name: regcred
  volumes:
    - name: install-config
      configMap:
        name: {{ printf "%s-install-config" $releaseName }}
        items:
          - key: conf
            path: thingsboard-mqtt-broker.conf
          - key: logback
            path: logback.xml
    - name: {{ $releaseName }}-tbmq-node-logs
      emptyDir: { }
  restartPolicy: OnFailure
  initContainers:
    - name: wait-for-postgres
      image: busybox:1.36
      command: ['sh', '-c', 'until nc -z {{ include "tbmq.postgres.host" . }} {{ include "tbmq.postgres.port" . }}; do echo waiting for postgres; sleep 2; done']
    - name: wait-for-redis-cluster
      image: bitnami/redis:7.2.5
      env:
      {{- if index .Values "redis-cluster" "usePassword" }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "tbmq.redis.secretName" . }}
              key: {{ include "tbmq.redis.secretKey" . }}
      {{- end }}
      command:
        - sh
        - -c
        - |
        {{- if index .Values "redis-cluster" "usePassword" }}
          until redis-cli -u redis://default:${REDIS_PASSWORD}@{{ include "tbmq.redis.nodes" . }} cluster info | grep "cluster_state:ok"; do
        {{- else }}
          until redis-cli -u redis://{{ include "tbmq.redis.nodes" . }} cluster info | grep "cluster_state:ok"; do
        {{- end }}
            echo "Waiting for Redis cluster...";
            sleep 2;
          done
  containers:
    - name: {{ $releaseName }}-db-setup
      imagePullPolicy: {{ .Values.tbmq.imagePullPolicy }}
      image: {{ include "tbmq.node.image" . }}
      env:
        - name: TB_SERVICE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: INSTALL_TB
          value: "true"
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "tbmq.postgres.secretName" . }}
              key: {{ include "tbmq.postgres.secretKey" . }}
        {{- if index .Values "redis-cluster" "usePassword" }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "tbmq.redis.secretName" . }}
              key: {{ include "tbmq.redis.secretKey" . }}
        {{- end }}
      envFrom:
        {{- include "tbmq.postgres.configuration.ref" . | indent 12 }}
        {{- include "tbmq.redis.configuration.ref" . | indent 12 }}
        {{- include "tbmq.kafka.configuration.ref" . | indent 12 }}
      volumeMounts:
        - mountPath: /config
          name: install-config
        - mountPath: /var/log/thingsboard-mqtt-broker
          name: {{ $releaseName }}-tbmq-node-logs
{{- end }}
